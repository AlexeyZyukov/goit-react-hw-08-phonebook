{"version":3,"sources":["components/Container/Container.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Container/Container.js","components/Form/Form.js","components/Filter/Filter.js","view/ContactsView/ContactsView.js"],"names":["module","exports","fetchContacts","dispatch","a","fetchContactRequest","axios","get","data","fetchContactSuccess","fetchContactError","message","getFilter","state","contacts","filter","filterContacts","allContacts","items","getContacts","contact","name","toLocaleLowerCase","includes","Container","children","className","s","container","Form","useState","setName","number","setNumber","useDispatch","handleChange","e","currentTarget","value","onSubmit","addContactRequest","post","then","addContactSuccess","catch","error","addContactError","contactsOperations","reset","preventDefault","type","pattern","title","onChange","required","Filter","useSelector","contactsSelectors","contactsActions","connect","onDelete","id","contactsId","delContactRequest","delete","delContactSuccess","delContactError","useEffect","map","onClick"],"mappings":"uJACAA,EAAOC,QAAU,CAAC,UAAY,+B,+HCYxBC,EAAgB,yDAAM,WAAMC,GAAN,iBAAAC,EAAA,6DAC1BD,EAASE,eADiB,kBAGDC,IAAMC,IAAI,aAHT,gBAGhBC,EAHgB,EAGhBA,KACRL,EAASM,YAAoBD,IAJL,gDAMxBL,EAASO,YAAkB,KAAMC,UANT,yDAAN,uDCZTC,EAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,QAGpCC,EAAiB,SAAAH,GAC5B,IAAMI,EALmB,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,MAK7BC,CAAYN,GAC1BE,EAASH,EAAUC,GACzB,OAAOI,EAAYF,QAAO,SAAAK,GAAO,OAC/BA,EAAQC,KAAKC,oBAAoBC,SAASR,EAAOO,yB,wBCNtC,SAASE,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,I,kBCExB,SAASI,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KAEM9B,EAAW+B,cAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,cAAlBhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MAEd,OAAQjB,GACN,IAAK,OACHU,EAAQO,GACR,MAEF,IAAK,SACHL,EAAUK,GACV,MAEF,QACE,SAGAC,EAAW,SAAClB,EAAMW,GAAP,OACf7B,EHJF,SAAC,GAAD,IAAGkB,EAAH,EAAGA,KAAMW,EAAT,EAASA,OAAT,OACA,SAAA7B,GACE,IAAMW,EAAW,CAAEO,OAAMW,UACzB7B,EAASqC,eAETlC,IACGmC,KAAK,YAAa3B,GAClB4B,MAAK,gBAAGlC,EAAH,EAAGA,KAAH,OAAcL,EAASwC,YAAkBnC,OAC9CoC,OAAM,SAAAC,GAAK,OAAI1C,EAAS2C,YAAgBD,QGJlCE,CAA8B1B,KAQnC2B,EAAQ,WACZjB,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAMP,UAAU,OAAOa,SAZJ,SAAAH,GACnBA,EAAEa,iBACFV,EAAS,CAAElB,OAAMW,WACjBgB,KASA,UACE,kCACE,mBAAGtB,UAAU,cAAb,mBACA,uBACEA,UAAU,cACVwB,KAAK,OACL7B,KAAK,OACL8B,QAAQ,yHACRC,MAAM,kcACNd,MAAOjB,EACPgC,SAAUlB,EACVmB,UAAQ,OAGZ,wBAAO5B,UAAU,cAAjB,UACE,mBAAGA,UAAU,cAAb,qBACA,uBACEA,UAAU,cACVwB,KAAK,MACL7B,KAAK,SACL8B,QAAQ,yFACRC,MAAM,obACNd,MAAON,EACPqB,SAAUlB,EACVmB,UAAQ,OAIZ,wBAAQJ,KAAK,SAASxB,UAAU,SAAhC,4BClES,SAAS6B,IACtB,IAAMjB,EAAQkB,YAAYC,GACpBtD,EAAW+B,cAEjB,OACE,sBAAKR,UAAU,mBAAf,UACE,mBAAGA,UAAU,aAAb,mCACA,uBACEA,UAAU,cACVwB,KAAK,OACL7B,KAAK,SACLiB,MAAOA,EACPe,SAAU,SAAAjB,GAAC,OACTjC,EAASuD,IAA+BtB,EAAEC,cAAcC,c,MCuBnDqB,sBAAQ,MAHI,SAAAxD,GAAQ,MAAK,CACtCD,cAAe,kBAAMC,EAAS4C,SAEjBY,EA9Bf,WACE,IAAM7C,EAAW0C,YAAYC,GACvBtD,EAAW+B,cACX0B,EAAW,SAAAC,GAAE,OAAI1D,GLsBL2D,EKtB6CD,ELsB/B,SAAA1D,GAChCA,EAAS4D,eAETzD,IACG0D,OADH,oBACuBF,IACpBpB,MAAK,kBAAMvC,EAAS8D,YAAkBH,OACtClB,OAAM,SAAAC,GAAK,OAAI1C,EAAS+D,YAAgBrB,UANzB,IAAAiB,GKlBlB,OAFAK,qBAAU,kBAAMhE,EAAS4C,OAAqC,CAAC5C,IAG7D,eAACqB,EAAD,WACE,cAACK,EAAD,IACA,cAAC0B,EAAD,IACA,oBAAI7B,UAAU,eAAd,SACGZ,EAASsD,KAAI,YAA2B,IAAxBP,EAAuB,EAAvBA,GAAIxC,EAAmB,EAAnBA,KAAMW,EAAa,EAAbA,OACzB,OACE,qBAAIN,UAAU,qBAAd,UACE,mBAAGA,UAAU,qBAAb,SAAmCL,IACnC,mBAAGK,UAAU,qBAAb,SAAmCM,IACnC,wBAAQN,UAAU,SAASmC,GAAIA,EAAIQ,QAAS,kBAAMT,EAASC,IAA3D,8BAHsCA","file":"static/js/3.337e8f6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3PBT8\"};","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  delContactRequest,\n  delContactSuccess,\n  delContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './contacts-actions';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error.message));\n  }\n};\n\nconst addContact =\n  ({ name, number }) =>\n  dispatch => {\n    const contacts = { name, number };\n    dispatch(addContactRequest());\n\n    axios\n      .post('/contacts', contacts)\n      .then(({ data }) => dispatch(addContactSuccess(data)))\n      .catch(error => dispatch(addContactError(error)));\n  };\n\nconst delContacts = contactsId => dispatch => {\n  dispatch(delContactRequest());\n\n  axios\n    .delete(`/contacts/${contactsId}`)\n    .then(() => dispatch(delContactSuccess(contactsId)))\n    .catch(error => dispatch(delContactError(error)));\n};\n\nexport { fetchContacts, addContact, delContacts };\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const filterContacts = state => {\n  const allContacts = getContacts(state);\n  const filter = getFilter(state);\n  return allContacts.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()),\n  );\n};\n","import s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as contactsOperations from '../../redux/contacts/contacts-operations';\nimport '../../view/RegisterView/RegisterView.css';\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  const onSubmit = (name, number) =>\n    dispatch(contactsOperations.addContact(name, number));\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <label>\n        <p className=\"form__label\">Name </p>\n        <input\n          className=\"form__input\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label className=\"form__label\">\n        <p className=\"form__label\"> Number</p>\n        <input\n          className=\"form__input\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки\"\n          value={number}\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className=\"button\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport * as contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\n\nexport default function Filter() {\n  const value = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"filter-container\">\n      <p className=\"title-text\">Find contacts by name</p>\n      <input\n        className=\"form__input\"\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={e =>\n          dispatch(contactsActions.filterContacts(e.currentTarget.value))\n        }\n      />\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport * as contactsOperations from '../../redux/contacts/contacts-operations';\nimport * as contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport Container from '../../components/Container/Container';\nimport Form from '../../components/Form/Form';\nimport Filter from '../../components/Filter/Filter';\n\nimport '../ContactsView/ContactsView.css';\n\nfunction ContactsView() {\n  const contacts = useSelector(contactsSelectors.filterContacts);\n  const dispatch = useDispatch();\n  const onDelete = id => dispatch(contactsOperations.delContacts(id));\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <Container>\n      <Form />\n      <Filter />\n      <ul className=\"contact-list\">\n        {contacts.map(({ id, name, number }) => {\n          return (\n            <li className=\"contact-list__item\" key={id}>\n              <p className=\"contact-list__text\">{name}</p>\n              <p className=\"contact-list__text\">{number}</p>\n              <button className=\"button\" id={id} onClick={() => onDelete(id)}>\n                Delete contact\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </Container>\n  );\n}\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\nexport default connect(null, mapDispatchToProps)(ContactsView);\n"],"sourceRoot":""}